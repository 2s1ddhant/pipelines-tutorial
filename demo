#!/usr/bin/env bash
set -e -u -o pipefail

declare -r SCRIPT_DIR=$(cd -P $(dirname $0) && pwd)

must_exist() {
  local path="$1"; shift
  [[ -r "$path" ]] || {
    echo "Missing file $path"
    exit 1
  }
  return 0
}

_log() {
    local level=$1; shift
    echo -e "$level: $@"
}


log.err() {
    _log "ERROR" "$@" >&2
}

info() {
    _log "\nINFO" "$@"
}

err() {
    local code=$1; shift
    local msg="$@"; shift
    log.err $msg
    exit $code
}

log.debug() {
    _log DEBUG "$@"
}


valid_command() {
  local fn=$1; shift
  [[ $(type -t "$fn") == "function" ]]
}

execute() {
  echo "Running:  '$@'"
  ${DRY_RUN:-false} || "$@"
}

demo.prep() {
  oc get ns -o name | grep -q namespace/pipelines-tutorial || {
    oc new-project pipelines-tutorial
  }
  oc create serviceaccount pipeline
  oc adm policy add-scc-to-user privileged -z pipeline
  oc adm policy add-role-to-user edit -z pipeline
}

declare -r TEKTON_CATALOG="https://raw.githubusercontent.com/tektoncd/catalog/master"
declare -r OPENSHIFT_CATALOG="https://raw.githubusercontent.com/openshift/pipelines-catalog/master"
declare -r TASKS_DIR=tmp/tasks

declare -r OC_TASK="$TEKTON_CATALOG/openshift-client/openshift-client-task.yaml"
declare -r LOCAL_OC_TASK="$TASKS_DIR/oc.task.yaml"

declare -r S2I_JAVA8_TASK="$OPENSHIFT_CATALOG/s2i-java-8/s2i-java-8-task.yaml"
declare -r LOCAL_S2I_JAVA8_TASK="$TASKS_DIR/s2i-java8.task.yaml"

demo.get-tasks() {
  echo Downloading tasks from catalog into $TASKS_DIR directory
  mkdir -p "$TASKS_DIR"
  curl -sLf  "$S2I_JAVA8_TASK" -o "$LOCAL_S2I_JAVA8_TASK"
  curl -sLf  "$OC_TASK" -o "$LOCAL_OC_TASK"
}


demo.setup() {
  demo.get-tasks

  info "Apply petclinic resources"
  oc apply -f resources/petclinic.yaml

  info "Apply pipeline tasks"
  oc apply -f "$TASKS_DIR"

  info "Applying resources"
  oc apply -f resources/petclinic-resources.yaml

  info "Applying pipeline"
  oc apply -f resources/petclinic-deploy-pipeline.yaml

  echo -e "\nPipeline"
  echo "==============="
  tkn p desc petclinic-deploy-pipeline
}

demo.logs() {
  tkn pipeline logs petclinic-deploy-pipeline -l -f
}

demo.run() {
  tkn pipeline start petclinic-deploy-pipeline \
    -r app-git=petclinic-git \
    -r app-image=petclinic-image \
    -s pipeline

  sleep 5
  demo.logs
}

demo.help() {
  cat <<-EOF
		USAGE:
		  demo [command]

		COMMANDS:
		  prep      creates project and service account
		  setup     creates tasks, pipeline and resources
		  run       starts pipeline
EOF

}


main() {
  local fn="demo.${1:-help}"
  valid_command "$fn" || {
    demo.help
    err  1 "invalid command '$1'"
  }

  cd $SCRIPT_DIR
  $fn "$@"
  return $?
}

main "$@"
